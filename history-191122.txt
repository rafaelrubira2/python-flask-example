    1  curl https://releases.rancher.com/install-docker/20.10.sh | sh
    2  docker ps
    3  sudo groupadd docker
    4  sudo usermod -aG docker $USER
    5  git config --global user.name rafaelrubira2
    6  git config --global user.email rafaelrubira2@gmail.com
    7  git config --global core.autocrlf false
    8  git config --global core.filemode false
    9  git config --global core.autocrlf false
   10  git config --global core.filemode false
   11  git config --global color.ui true
   12  ssh-keygen -o -t kube_ed25519 -C "rafaelrubira2" -N "" -f ~/.ssh/kube_id_ed25519
   13  ssh-keygen -o -t ed25519 -C "rafaelrubira2" -N "" -f ~/.ssh/id_ed25519
   14  cat /home/ubuntu/.ssh/id_ed24419.pub
   15  ls /home/ubuntu/.ssh
   16  cat /home/ubuntu/.ssh/id_ed25519.pub
   17  git clone git@github.com:rafaelrubira2/python-flask-example.git
   18  ls
   19  cd python-flask-example/
   20  ls
   21  git checkout kubernetes/desafio-01
   22  branch
   23  git branch
   24  sudo apt-get install apt-transport-https ca-certificates gnupg
   25  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
   26  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
   27  sudo apt-get update && sudo apt-get install google-cloud-cli
   28  cat /etc/apt/sources.list.d/google-cloud-sdk.list
   29  sudo apt-get install kubectl
   30  kubectl version
   31  kubectl version --output=yaml
   32  sudo apt install kubectl
   33  gcloud init
   34  export PROJECT_ID=optimum-courier-369113
   35  echo 'export PROJECT_ID=optimum-courier-369113' >> ~/.bashrc
   36  cat ~/.bashrc
   37  echo 'RafaelRubira Ã© o cara' >> ~/.bashrc
   38  cat ~/.bashrc
   39  vim ~/.bashrc
   40  gcloud project list
   41  gcloud projects list
   42  gcloud auth configure-docker
   43  docker image ls
   44  sudo usermod -aG docker $USER
   45  docker image ls
   46  ls
   47  exit
   48  cd python-flask-example/
   49  docker image ls
   50  history
   51  ls
   52  docker build . -t gcr.io/optimum-courier-369113/app-flask:1.0.0
   53  docker push gcr.io/optimum-courier-369113/app-flask
   54  docker push gcr.io/optimum-courier-369113/app-flask:1.0.0
   55  docker run --rm -p 3000:3000 -d --name node gcr.io/optimum-courier-369113/app-flask:1.0.0
   56  docker run --rm -p 3000:3000 -d --name node2 gcr.io/optimum-courier-369113/app-flask:1.0.0
   57  docker run --rm -p 3001:3001 -d --name node2 gcr.io/optimum-courier-369113/app-flask:1.0.0
   58  curl localhost:3001
   59  docker container ls
   60  docker container stop
   61  docker container stop --help
   62  docker container stop node
   63  docker container stop node2
   64  docker container ls
   65  sudo apt install google-cloud-sdk-gke-gcloud-auth-plugin
   66  export USE_GKE_GCLOUD_AUTH_PLUGIN=True
   67  echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> ~/.bashrc
   68  vim ~/.bashrc
   69  kubectl get nodes
   70  gcloud container clusters get-credentials demo-cluster
   71  kubectl get nodes
   72  ls
   73  cat app.pod.yml
   74  git branch
   75  cat app.py
   76  cat requirements.txt
   77  touch app.deployment.yml
   78  vim app.deployment.yml 
   79  vim -r app.deployment.yml 
   80  echo "" > app.deployment.yml 
   81  vim app.deployment.yml 
   82  vim -r app.deployment.yml 
   83  echo "" > app.deployment.yml 
   84  vim app.deployment.yml 
   85  echo "" > app.deployment.yml 
   86  vim app.deployment.yml 
   87  echo "apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-1.0.0
  labels:
    app: my-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
        version: 1.0.0
    spec:
      containers:
      - name: app-flask
        #image: localhost:32000/app-flask:latest
        image: app-flask:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        resources:
          limits:
            memory: "256Mi" # 256MB
            cpu: "200m"     # 200milli cpu (.2 cpu or 20% of cpu)

        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 5
          failureThreshold: 1

        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 2
          periodSeconds: 5" > app.deployment.yml
   88  vim app.deployment.yml
   89  kubectl service ls
   90  kubectl apply app.deployment.yml
   91  cat app.deployment.yml
   92  docker image ls
   93  vim app.deployment.yml
   94  cat app.deployment.yml
   95  vim app.deployment.yml
   96  kubectl apply app.deployment.yml
   97  kubectl get pots
   98  kubectl get pods
   99  kubectl apply -f app.deployment.yml
  100  kubectl get pods
  101  touch app.service.loadbalance.yml
  102  echo '#visao geral do yml do service kubernets
apiVersion: v1
kind: Service
metadata:
  name: load-balancer-service #nome arbitrario
spec:
  type: LoadBalancer
  selector: #seleciona o pod, vai redirecionar para todos os que tem o mesmo nome
    app: my-app
  
  ports:
  - name: "http"
    port: 80
    targetPort: 3000' > app.service.loadbalance.yml
  103  vim app.service.loadbalance.yml 
  104  cat app.service.loadbalance.yml 
  105  kubectl apply -f app.service.loadbalance.yml
  106  gcloud container clusters get-credentials demo-cluster
  107  kubectl get all
  108  ls
  109  cat app.py
  110  vim app.py
  111  kubectl get service
  112  kubectl get services
  113  cat app.service.loadbalance.yml 
  114  kubectl get service load-balancer-service --output yaml
  115  vim app.deployment.yml 
  116  kubectl apply -f app.deployment.yml 
  117  kubectl get all
  118  kubectl scale deployment my-app --replicas=4
  119  kubectl get all
  120  vim app.deployment.yml 
  121  ls -la
  122  delete .app.deployment.yml.swp 
  123  rm .app.deployment.yml.swp 
  124  gcloud container clusters resize demo-cluster --num-nodes=5
  125  gcloud container clusters resize demo-cluster --num-nodes=2
  126  kubectl get all
  127  gcloud container clusters resize demo-cluster --num-nodes=1
  128  ls
  129  vim app.deployment.yml 
  130  vim app.py
  131  gcloud container clusters resize demo-cluster --num-nodes=2
  132  docker build .t -gcr.io/$PROJECT_ID/app-flask:2.0.0
  133  docker build -t gcr.io/$PROJECT_ID/app-flask:2.0.0
  134  docker build . -t gcr.io/$PROJECT_ID/app-flask:2.0.0
  135  docker push gcr.io/optimum-courier-369113/app-flask:2.0.0
  136  kubectl get all
  137  kubectl delete -f deployment.apps/my-app
  138  kubectl delete deployment.apps/my-app
  139  kubectl delete service/load-balancer-service
  140  vim app.deployment.yml 
  141  kubectl get all
  142  gcloud container cluster list
  143  gcloud container clusters list
  144  gcloud container cluster delete demo-cluster
  145  gcloud container clusters delete demo-cluster
  146  docker image ls
  147  gcloud container images delete gcr.io/optimum-courier-369113/app-flask:1.0.0
  148  gcloud container images delete grc.io/optimum-courier-369113/app-flask:1.0.0
  149  docker image ls
  150  docker images delete gcr.io/optimum-courier-369113/app-flask
  151  docker rm gcr.io/optimum-courier-369113/app-flask:1.0.0
  152  docker image rm gcr.io/optimum-courier-369113/app-flask:1.0.0
  153  docker image rm grc.io/optimum-courier-369113/app-flask:1.0.0
  154  docker image rm python
  155  docker image rm python:3.8-slim-buster
  156  docker image ls
  157  touch history-191122.txt
  158  echo history >> history-191122.txt 
  159  cat history-191122.txt 
  160  history > history-191122.txt 
